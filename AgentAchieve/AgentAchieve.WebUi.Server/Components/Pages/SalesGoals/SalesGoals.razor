@page "/salesgoals"
@using AgentAchieve.Infrastructure.Features.Identity
@using AgentAchieve.Infrastructure.Features.SalesGoals
@using Microsoft.AspNetCore.Authorization
@using Telerik.DataSource
@using Telerik.FontIcons;

@inject ISalesGoalService DataService;
@inject IIdentityService IdentityService;
@inject ICurrentUserService CurrentUserService;
@attribute [Authorize]

<PageTitle>Sales Goals</PageTitle>
<TelerikCard>
    <CardHeader Class="p-2">
        <CardActions Class="p-0">
            <TelerikButtonGroup SelectionMode="@ButtonGroupSelectionMode.Single">
                <ButtonGroupToggleButton @bind-Selected="@IsGridLayoutSelected">Grid</ButtonGroupToggleButton>
                <ButtonGroupToggleButton @bind-Selected="@IsChartLayoutSelected">Chart</ButtonGroupToggleButton>
            </TelerikButtonGroup>
            <TelerikButtonGroup SelectionMode="@ButtonGroupSelectionMode.Single">
                <ButtonGroupToggleButton @bind-Selected="@IsIndividualLayoutSelected" OnClick="@SetStateForIndividualLayout">Individual</ButtonGroupToggleButton>
                <ButtonGroupToggleButton @bind-Selected="@IsTeamLayoutSelected" OnClick="@SetStateForTeamLayout">Team</ButtonGroupToggleButton>
            </TelerikButtonGroup>

            @if (IsTeamLayoutSelected && IsGridLayoutSelected)
            {
                <TelerikButtonGroup SelectionMode="@ButtonGroupSelectionMode.Single">
                    <ButtonGroupToggleButton @bind-Selected="@IsGroupByGoalSelected" OnClick="@SetStateForTeamLayoutGroupedByGoalMonthYear">Group by Goal Month/Year</ButtonGroupToggleButton>
                    <ButtonGroupToggleButton @bind-Selected="@IsGroupByAgentSelected" OnClick="@SetStateForTeamLayoutGroupedByAgent">Group by Agent</ButtonGroupToggleButton>
                </TelerikButtonGroup>
            }
            @if (IsIndividualLayoutSelected)
            {
                <TelerikDropDownList Data="@ApplicationUserDtos"
                                     @bind-Value="@SelectedAgentId"
                                     DefaultText="Select an Agent..."
                                     TextField="@nameof(ApplicationUserDto.FullName)"
                                     ValueField="@nameof(ApplicationUserDto.Id)"
                                     Filterable=true
                                     FilterOperator=StringFilterOperator.Contains
                                     OnChange="@FilterByAgent"
                                     Width="auto" />
            }

        </CardActions>
    </CardHeader>
    @if (IsGridLayoutSelected)
    {
        <div id="gridWrapper">
            <TelerikGrid Data="@AllData"
                         @ref="@Grid"
                         Class="!k-border-0"
                         Pageable="true"
                         PageSize="10"
                         Sortable="true"
                         SortMode="@SortMode.Single"
                         FilterMode="@GridFilterMode.FilterMenu"
                         Resizable="true"
                         SelectionMode="GridSelectionMode.Single"
                         Reorderable="true"
                         EditMode="@GridEditMode.Popup"
                         OnUpdate="@Update"
                         OnCreate="@Create"
                         OnAdd="@Add"
                         OnDelete="@Delete"
                         ConfirmDelete="true"
                         OnStateInit="@( (GridStateEventArgs<SalesGoalDto> args) => OnGridStateInit(args) )">
                <GridSettings>
                    <GridPopupEditSettings MaxWidth="1200px"
                                           MaxHeight="800px"
                                           MinWidth="600px"
                                           Class="custom-popup">
                    </GridPopupEditSettings>
                    <GridPopupEditFormSettings Orientation="@FormOrientation.Horizontal"
                                               ButtonsLayout="FormButtonsLayout.Center"
                                               Columns="1">
                    </GridPopupEditFormSettings>
                </GridSettings>
                <GridExport>
                    <GridExcelExport FileName="sales_goals" AllPages="true" />
                </GridExport>
                <GridToolBarTemplate>

                    <GridCommandButton Command="Add" Icon="@SvgIcon.Plus">Add</GridCommandButton>
                    <GridCommandButton Command="ExcelExport" Icon="@SvgIcon.FileExcel">Export to Excel</GridCommandButton>
                </GridToolBarTemplate>

                <GridAggregates>
                    <GridAggregate Field="@nameof(SalesGoalDto.SalesGoalAmount)" Aggregate="GridAggregateType.Sum" />
                    <GridAggregate Field="@nameof(SalesGoalDto.TotalSales)" Aggregate="GridAggregateType.Sum" />
                    <GridAggregate Field="@nameof(SalesGoalDto.SalesGoalVariance)" Aggregate="GridAggregateType.Sum" />
                </GridAggregates>

                <GridColumns>
                    <GridColumn Field="@nameof(SalesGoalDto.Id)" Editable="false" Visible="false" />

                    <GridColumn Field="@nameof(SalesGoalDto.OwnerFullName)" Width="300px" Filterable="false">
                        <EditorTemplate>
                            @{
                                GoalToEdit = context as SalesGoalDto ?? new SalesGoalDto();
                                <TelerikDropDownList Data="@ApplicationUserDtos"
                                                     @bind-Value="@GoalToEdit.OwnedById"
                                                     TextField="@nameof(ApplicationUserDto.FullName)"
                                                     ValueField="@nameof(ApplicationUserDto.Id)"
                                                     Filterable=true
                                                     FilterOperator=StringFilterOperator.Contains
                                                     FilterPlaceholder="Search for an Agent..." />
                            }
                        </EditorTemplate>
                    </GridColumn>

                    <GridColumn Field="@nameof(SalesGoalDto.GoalMonthYear)" Width="225px">

                        <EditorTemplate>
                            @{
                                GoalToEdit = context as SalesGoalDto ?? new SalesGoalDto();
                                <TelerikDatePicker @bind-Value="@GoalToEdit.GoalMonthYear"
                                                   Width="100%"
                                                   Id="datepicker"
                                                   BottomView="@CalendarView.Year"
                                                   Format="MMM yyyy">
                                </TelerikDatePicker>
                            }
                        </EditorTemplate>
                        <GroupHeaderTemplate>
                            <span>Goal Month/Year: @((context.Value as DateTime?).GetValueOrDefault().ToString("MMM yyyy"))</span>
                        </GroupHeaderTemplate>

                    </GridColumn>

                    <GridColumn Field="@nameof(SalesGoalDto.SalesGoalAmount)" TextAlign="@ColumnTextAlign.Right" Width="200px">
                        <EditorTemplate>
                            @{
                                GoalToEdit = context as SalesGoalDto ?? new SalesGoalDto();
                                <TelerikNumericTextBox @bind-Value="@GoalToEdit.SalesGoalAmount"
                                                       Format="C2"
                                                       Decimals="2"
                                                       Min="0"
                                                       Max="9999999999999999.99m" />
                            }
                        </EditorTemplate>
                        <GroupFooterTemplate>
                            @if (!(SelectedAgentId != null && IsGroupByGoalSelected == true))
                            {
                                <span>
                                    Total Sales Goals:
                                    <strong>@(string.Format("{0:C2}", context.Sum))</strong>
                                </span>
                            }
                        </GroupFooterTemplate>
                    </GridColumn>

                    <GridColumn Field="@nameof(SalesGoalDto.TotalSales)" TextAlign="@ColumnTextAlign.Right" Width="200px" Editable=false>
                        <GroupFooterTemplate>
                            @if (!(SelectedAgentId != null && IsGroupByGoalSelected == true))
                            {
                                <span>
                                    Total Sales:
                                    <strong>@(string.Format("{0:C2}", context.Sum))</strong>
                                </span>
                            }
                        </GroupFooterTemplate>

                    </GridColumn>

                    <GridColumn Field="@nameof(SalesGoalDto.SalesGoalVariance)" TextAlign="@ColumnTextAlign.Right" Width="250px" OnCellRender="OnSalesGoalVarianceCellRenderHandler" Editable=false>
                        <GroupFooterTemplate>
                            @if (!(SelectedAgentId != null && IsGroupByGoalSelected == true))
                            {
                                var sum = context.Sum;
                                var sumClass = sum > 0 ? "k-text-success !k-font-weight-bold" : "k-text-error !k-font-weight-bold";
                                <span>
                                    Total Over/Under Sales Goal:
                                    <strong class="@sumClass">@string.Format("{0:C2}", sum)</strong>
                                </span>
                            }
                        </GroupFooterTemplate>
                    </GridColumn>

                    <GridColumn Field="@nameof(SalesGoalDto.PercentToSalesGoal)" TextAlign="@ColumnTextAlign.Right" Width="200px" Editable=false>
                        <Template>
                            @{
                                var percentToSalesGoal = Convert.ToDouble(Math.Round((context as SalesGoalDto ?? new SalesGoalDto()).PercentToSalesGoal, 2));
                                var progressBarClass = percentToSalesGoal < 50 ? "red-progress-bar" : percentToSalesGoal < 75 ? "yellow-progress-bar" : "green-progress-bar";
                            }
                            <TelerikProgressBar Class="@progressBarClass" Max="100" Value="@percentToSalesGoal" />
                        </Template>
                    </GridColumn>

                    <GridCommandColumn Width="194px">
                        <GridCommandButton Command="Edit" Icon="@SvgIcon.Pencil" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Edit</GridCommandButton>
                        <GridCommandButton Command="Save" Icon="@SvgIcon.Save" ShowInEdit="true">Save</GridCommandButton>
                        <GridCommandButton Command="Cancel" Icon="@SvgIcon.Cancel" ShowInEdit="true">Cancel</GridCommandButton>
                        <GridCommandButton Command="Delete" Icon="@SvgIcon.Trash">Delete</GridCommandButton>
                    </GridCommandColumn>
                </GridColumns>
            </TelerikGrid>
        </div>
    }
    else
    {
        <div id="chartWrapper">
            <TelerikChart>
                <ChartTitle Text="Sales Goals"></ChartTitle>
                <ChartCategoryAxes>
                    <ChartCategoryAxis BaseUnit="@ChartCategoryAxisBaseUnit.Months"
                                       Type="@ChartCategoryAxisType.Date">
                    </ChartCategoryAxis>
                </ChartCategoryAxes>
                <ChartTooltip Visible="true" Shared="true">
                    <SharedTemplate>
                        <div>
                            @{
                                var category = context.Category?.ToString();
                                if (DateTime.TryParse(category, out var parsedDate))
                                {
                                    string formattedDate = parsedDate.ToString("MMM yyyy");
                                    <h4 class="shared-tooltip-title">Sales Goals for @formattedDate.</h4>
                                }

                                var points = context.Points as List<ChartSeriesTooltipTemplatePoint>;

                                if (points != null)
                                {
                                    <table>
                                        <thead>
                                            <tr>

                                                <th colspan="2">Agent</th>
                                                <th>Sales Goal Amount</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var point in points)
                                            {
                                                var dataItem = (point.DataItem as SalesGoalDto ?? new SalesGoalDto());
                                                <tr>
                                                    <td>
                                                        <span class="k-chart-shared-tooltip-marker"
                                                              style="background-color: @point.SeriesColor; display: inline-block;">
                                                        </span>
                                                    </td>
                                                    <td>
                                                        @point.SeriesName
                                                    </td>
                                                    <td>
                                                        @dataItem.SalesGoalAmount.GetValueOrDefault().ToString("C2")
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                            }
                        </div>
                    </SharedTemplate>
                </ChartTooltip>
                <ChartLegend Visible="false"></ChartLegend>
                <ChartSeriesItems>
                    @foreach (var agentId in ChartData.Select(x => x.OwnedById).Distinct())
                    {
                        var agentName = ApplicationUserDtos.FirstOrDefault(x => x.Id == agentId)?.FullName;
                        var agentData = ChartData.Where(x => x.OwnedById == agentId).ToList();

                        <ChartSeries Type="ChartSeriesType.Column"
                                     Name="@agentName"
                                     Data="@agentData"
                                     Field="@nameof(SalesGoalDto.SalesGoalAmount)"
                                     CategoryField="@nameof(SalesGoalDto.GoalMonthYear)">
                            <ChartSeriesStack Enabled="true" Group="goal"></ChartSeriesStack>
                        </ChartSeries>
                    }
                </ChartSeriesItems>
                <ChartValueAxes>
                    <ChartValueAxis>
                        <ChartValueAxisLabels Format="{0:C}" />
                    </ChartValueAxis>
                </ChartValueAxes>
            </TelerikChart>
            <TelerikChart>
                <ChartTitle Text="Actual Sales"></ChartTitle>
                <ChartCategoryAxes>
                    <ChartCategoryAxis BaseUnit="@ChartCategoryAxisBaseUnit.Months"
                                       Type="@ChartCategoryAxisType.Date">
                    </ChartCategoryAxis>
                </ChartCategoryAxes>
                <ChartTooltip Visible="true" Shared="true">
                    <SharedTemplate>
                        <div>
                            @{
                                var category = context.Category?.ToString();
                                if (DateTime.TryParse(category, out var parsedDate))
                                {
                                    string formattedDate = parsedDate.ToString("MMM yyyy");
                                    <h4 class="shared-tooltip-title">Sales Goals for @formattedDate.</h4>
                                }

                                var points = context.Points as List<ChartSeriesTooltipTemplatePoint>;

                                if (points != null)
                                {
                                    <table>
                                        <thead>
                                            <tr>

                                                <th colspan="2">Agent</th>
                                                <th>Actual Sales</th>
                                                <th>Over/Under Sales Goal</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var point in points)
                                            {
                                                var dataItem = (point.DataItem as SalesGoalDto ?? new SalesGoalDto());
                                                var varianceClass = dataItem.SalesGoalVariance > 0 ? "k-text-success !k-font-weight-bold" : "k-text-error !k-font-weight-bold";
                                                <tr>
                                                    <td>
                                                        <span class="k-chart-shared-tooltip-marker"
                                                              style="background-color: @point.SeriesColor; display: inline-block;">
                                                        </span>
                                                    </td>
                                                    <td>
                                                        @point.SeriesName
                                                    </td>
                                                    <td>
                                                        @dataItem.TotalSales.ToString("C2")
                                                    </td>
                                                    <td class="@varianceClass">
                                                        @dataItem.SalesGoalVariance.ToString("C2").
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                            }
                        </div>
                    </SharedTemplate>
                </ChartTooltip>
                <ChartLegend Position="ChartLegendPosition.Bottom"></ChartLegend>
                <ChartSeriesItems>
                    @foreach (var agentId in ChartData.Select(x => x.OwnedById).Distinct())
                    {
                        var agentName = ApplicationUserDtos.FirstOrDefault(x => x.Id == agentId)?.FullName;
                        var agentData = ChartData.Where(x => x.OwnedById == agentId).ToList();

                        <ChartSeries Type="ChartSeriesType.Column"
                                     Name="@agentName"
                                     Data="@agentData"
                                     Field="@nameof(SalesGoalDto.TotalSales)"
                                     CategoryField="@nameof(SalesGoalDto.GoalMonthYear)">
                            <ChartSeriesStack Enabled="true" Group="totalSales"></ChartSeriesStack>
                        </ChartSeries>
                    }
                </ChartSeriesItems>
                <ChartValueAxes>
                    <ChartValueAxis>
                        <ChartValueAxisLabels Format="{0:C}" />
                    </ChartValueAxis>
                </ChartValueAxes>
            </TelerikChart>
        </div>
    }


</TelerikCard>


<TelerikNotification @ref="NotificationComponent"
                     AnimationDuration="200"
                     AnimationType="@AnimationType.Fade"
                     VerticalPosition="@NotificationVerticalPosition.Top"
                     HorizontalPosition="@NotificationHorizontalPosition.Right"
                     Class="myNotificationClass" />

@code {
    #region Properties
    TelerikGrid<SalesGoalDto> Grid { get; set; } = new TelerikGrid<SalesGoalDto>();
    public List<SalesGoalDto> AllData { get; set; } = new List<SalesGoalDto>();
    public List<SalesGoalDto> ChartData { get; set; } = new List<SalesGoalDto>();
    public List<ApplicationUserDto> ApplicationUserDtos { get; set; } = new List<ApplicationUserDto>();
    private SalesGoalDto GoalToEdit { get; set; } = new SalesGoalDto();
    private string? CurrentUserId { get; set; }
    string? SelectedAgentId { get; set; }
    TelerikNotification NotificationComponent { get; set; } = new TelerikNotification();
    bool IsGridLayoutSelected { get; set; } = true;
    bool IsChartLayoutSelected { get; set; }
    bool IsIndividualLayoutSelected { get; set; } = true;
    bool IsTeamLayoutSelected { get; set; }
    bool IsGroupByGoalSelected { get; set; } = true;
    bool IsGroupByAgentSelected { get; set; }
    #endregion

    #region Initialization
    protected override async Task OnInitializedAsync()
    {
        CurrentUserId = await CurrentUserService.GetUserIdAsync();
        SelectedAgentId = CurrentUserId;
        ApplicationUserDtos = (await IdentityService.GetUsers()).ToList();
        await LoadData();
        ChartData = AllData.Where(x => x.OwnedById == SelectedAgentId).ToList();
        await base.OnInitializedAsync();
    }

    private async Task LoadData()
    {
        AllData = (await DataService.GetAllDtoAsync()).ToList();
        ChartData = new List<SalesGoalDto>(AllData);
    }
    #endregion

    #region Grid State Management
    private void OnGridStateInit(GridStateEventArgs<SalesGoalDto> args)
    {
        args.GridState.SortDescriptors.Add(GoalMonthYearSortDescriptor());
        args.GridState.FilterDescriptors.Add(IndividualAgenFilterDescriptor());
    }

    /// <summary>
    /// Sets the grid state for the individual layout.
    /// Clears the sort and group descriptors, and sets the sort descriptor to sort by percent to sales goal in descending order.
    /// Clears the group descriptors.
    /// </summary>
    public async Task SetStateForIndividualLayout()
    {
        var state = Grid.GetState();
        state.SortDescriptors.Clear();
        state.SortDescriptors.Add(PercentToSalesGoalSortDescriptor());
        if (SelectedAgentId == null)
        {
            SelectedAgentId = CurrentUserId;
            ChartData = AllData.Where(x => x.OwnedById == SelectedAgentId).ToList();
        }
        state.FilterDescriptors.Clear();
        state.FilterDescriptors.Add(IndividualAgenFilterDescriptor());
        state.GroupDescriptors.Clear();
        await Grid.SetStateAsync(state);
    }

    /// <summary>
    /// Sets the grid state for the team layout.
    /// Clears the filter descriptors when going from individual to team.
    /// </summary>
    public async Task SetStateForTeamLayout()
    {
        SelectedAgentId = null;
        IsGroupByGoalSelected = true;
        IsGroupByAgentSelected = false;
        var state = Grid.GetState();
        state.FilterDescriptors.Clear();
        await Grid.SetStateAsync(state);
        await SetStateForTeamLayoutGroupedByGoalMonthYear();
        ChartData = new List<SalesGoalDto>(AllData);
    }

    /// <summary>
    /// Sets the grid state for the team layout grouped by goal month/year.
    /// Clears the sort and filter descriptors.
    /// Clears the group descriptors and adds a group descriptor to group by goal month/year.
    /// </summary>
    public async Task SetStateForTeamLayoutGroupedByGoalMonthYear()
    {
        var state = Grid.GetState();
        state.SortDescriptors.Clear();
        state.SortDescriptors.Add(PercentToSalesGoalSortDescriptor());
        state.GroupDescriptors.Clear();
        state.GroupDescriptors.Add(GroupByGoalMonthYearDescriptor());
        await Grid.SetStateAsync(state);
    }

    /// <summary>
    /// Sets the grid state for the team layout grouped by agent.
    /// Clears the sort and filter descriptors.
    /// Clears the group descriptors and adds a group descriptor to group by agent.
    /// </summary>
    public async Task SetStateForTeamLayoutGroupedByAgent()
    {
        var state = Grid.GetState();
        state.SortDescriptors.Clear();
        state.SortDescriptors.Add(GoalMonthYearSortDescriptor());
        state.GroupDescriptors.Clear();
        state.GroupDescriptors.Add(GroupByAgentDescriptor());
        await Grid.SetStateAsync(state);
    }

    public async Task FilterByAgent(object? value)
    {
        var agentId = value as string;
        SelectedAgentId = agentId;
        var state = Grid.GetState();
        state.FilterDescriptors.Clear();
        if (agentId != null)
        {
            state.FilterDescriptors.Add(IndividualAgenFilterDescriptor());
            ChartData = AllData.Where(x => x.OwnedById == agentId).ToList();
        }
        else
        {
            ChartData = new List<SalesGoalDto>(AllData);
        }
        await Grid.SetStateAsync(state);
    }
    #endregion

    #region Grid CRUD Event Handlers

    /// <summary>
    /// Sets the owner ID of the goal to the current user's ID when adding a new goal in pop-up edit mode
    /// so that the goal is automatically assigned to the current user.
    /// </summary>
    /// <param name="args"></param>
    void Add(GridCommandEventArgs args)
    {
        var goal = (SalesGoalDto)args.Item;
        goal.OwnedById = SelectedAgentId;
    }

    async Task Update(GridCommandEventArgs args)
    {
        var goal = (SalesGoalDto)args.Item;
        var isDuplicate = await IsDuplicateGoal(goal);
        if (isDuplicate)
        {
            args.IsCancelled = true;
            return;
        }
        await DataService.UpdateSalesGoalAsync(goal);
        await LoadData();
    }

    async Task Create(GridCommandEventArgs args)
    {
        var goal = (SalesGoalDto)args.Item;
        var isDuplicate = await IsDuplicateGoal(goal);
        if (isDuplicate)
        {
            args.IsCancelled = true;
            return;
        }
        await DataService.CreateSalesGoalAsync(goal);
        await LoadData();
    }

    async Task Delete(GridCommandEventArgs args)
    {
        var goal = (SalesGoalDto)args.Item;
        await DataService.DeleteSalesGoalAsync(goal.Id);
        await LoadData();
    }
    #endregion

    #region Helper Methods
    /// <summary>
    /// Checks if the provided sales goal is a duplicate.
    /// A sales goal is considered a duplicate if another goal exists with the same owner ID and goal date.
    /// If the goal's owner ID or date is not set, a notification is shown and the method returns false.
    /// If a duplicate is found, a notification is shown and the method returns true.
    /// </summary>
    /// <param name="goal">The sales goal to check for duplicates.</param>
    /// <returns>True if the goal is a duplicate, false otherwise.</returns>
    async Task<bool> IsDuplicateGoal(SalesGoalDto goal)
    {
        if (goal.OwnedById == null || !goal.GoalMonthYear.HasValue)
        {
            NotificationComponent.Show("The Goal's owner ID or Goal Month/Year is not set.", ThemeConstants.Notification.ThemeColor.Error);
            return false;
        }

        var isDuplicate = await DataService.DoesGoalExistAsync(goal);
        if (isDuplicate)
        {
            NotificationComponent.Show("A Sales Goal for this Agent and Goal Month/Year already exists.", ThemeConstants.Notification.ThemeColor.Error);
        }
        return isDuplicate;
    }

    public void OnSalesGoalVarianceCellRenderHandler(GridCellRenderEventArgs args)
    {
        // add css based on the value of the cell
        args.Class = (decimal)args.Value > 0 ? "k-text-success !k-font-weight-bold" : "k-text-error !k-font-weight-bold";
    }
    #endregion

    #region Sort/Group/Filter Descriptors
    SortDescriptor PercentToSalesGoalSortDescriptor() => new SortDescriptor()
        {
            Member = nameof(SalesGoalDto.PercentToSalesGoal),
            SortDirection = ListSortDirection.Descending
        };

    SortDescriptor GoalMonthYearSortDescriptor() => new SortDescriptor()
        {
            Member = nameof(SalesGoalDto.GoalMonthYear),
            SortDirection = ListSortDirection.Descending
        };

    FilterDescriptor IndividualAgenFilterDescriptor() => new FilterDescriptor(nameof(SalesGoalDto.OwnedById), FilterOperator.IsEqualTo, SelectedAgentId);

    GroupDescriptor GroupByGoalMonthYearDescriptor() => new GroupDescriptor()
        {
            Member = nameof(SalesGoalDto.GoalMonthYear),
            SortDirection = ListSortDirection.Descending
        };

    GroupDescriptor GroupByAgentDescriptor() => new GroupDescriptor()
        {
            Member = nameof(SalesGoalDto.OwnerFullName),
            SortDirection = ListSortDirection.Ascending
        };
    #endregion
}

<style>
    .myNotificationClass {
        z-index: 20000;
    }

    .k-notification-container {
        margin: 6px;
    }

    .red-progress-bar .k-selected {
        background-color: #dc3545;
    }

    .yellow-progress-bar .k-selected {
        background-color: #ffc107;
    }

    .green-progress-bar .k-selected {
        background-color: #198754;
    }

    .align-with-dropdown {
        margin-top: 1.5rem; /* Align with TelerikFloatingLabel */
    }
</style>

