@page "/Account/ExternalLogin"

@using System.Security.Claims
@using AgentAchieve.Core.Domain
@using AgentAchieve.Infrastructure.Features.Identity
@using Microsoft.AspNetCore.Identity

@inject IIdentityService IdentityService
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger

<PageTitle>Register</PageTitle>

<StatusMessage Message="@message" />

@code {
    // Constant for the login callback action
    public const string LoginCallbackAction = "LoginCallback";

    // Message to be displayed in the UI
    private string? message;

    // Information about the external login
    private ExternalLoginInfo externalLoginInfo = default!;

    // The current HTTP context
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    // Error message from the external login provider
    [SupplyParameterFromQuery]
    private string? RemoteError { get; set; }

    // URL to redirect to after login
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    // The action to perform
    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    /// <summary>
    /// Initializes the component.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // Handle errors from external provider
        if (RemoteError is not null)
        {
            var errorMessage = $"Error from external provider: {RemoteError}";
            Logger.LogError(errorMessage);
            RedirectManager.RedirectToWithStatus("Account/Login", errorMessage, HttpContext);
        }

        // Get external login info
        var info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
        {
            var errorMessage = "Error loading external login information.";
            Logger.LogError(errorMessage);
            RedirectManager.RedirectToWithStatus("Account/Login", errorMessage, HttpContext);
        }

        // Store the external login info for later use
        externalLoginInfo = info;

        // If the request is a GET request
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // If the action is the login callback action
            if (Action == LoginCallbackAction)
            {
                // Handle the login callback
                await OnLoginCallbackAsync();
            }
            else
            {
                // We should only reach this page via the login callback, so redirect back to
                // the login page if we get here some other way.
                RedirectManager.RedirectTo("Account/Login");
            }
        }
    }

    /// <summary>
    /// Handles the login callback.
    /// </summary>
    private async Task OnLoginCallbackAsync()
    {
        // Process the external login
        var result = await IdentityService.ProcessExternalLoginAsync(externalLoginInfo);

        // If the login was successful

        if (result.Status == AuthenticationResultStatus.Success)
        {
            // Log the successful login
            Logger.LogInformation($"{externalLoginInfo.Principal.Identity?.Name} logged in with {externalLoginInfo.LoginProvider} provider.");

            // Redirect to the return URL
            RedirectManager.RedirectTo(ReturnUrl);
        }
        // If a new account was created
        else if (result.Status == AuthenticationResultStatus.NewAccountCreated)
        {
            // Log the account creation
            Logger.LogInformation($"{externalLoginInfo.Principal.Identity?.Name}  created an account and logged in using {externalLoginInfo.LoginProvider} provider.");

            // Redirect to the return URL
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            // If the login failed, store the error messages to be displayed in the UI
            message = string.Join(",", result.Errors);
        }
    }
}