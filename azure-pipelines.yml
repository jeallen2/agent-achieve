trigger:
- dev
- main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  solutionPath: '**/*.sln'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk'
  inputs:
    packageType: 'sdk'
    version: '8.x'

- task: NuGetAuthenticate@1
  inputs:
    nuGetServiceConnections: 'telerik'

- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet packages'
  inputs:
    command: 'restore'
    projects: '$(solutionPath)'
    feedsToUse: 'config'
    nugetConfigPath: 'AgentAchieve/NuGet.config'
    externalFeedCredentials: 'telerik'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '$(solutionPath)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Install EF Core tools'
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'install --global dotnet-ef'

- powershell: |
    $maxRetries = 3 
    $sleepIntervalSeconds = 15 
    
    $retryCount = 0
    do {
        try {
            Write-Host "Applying EF Core migrations - attempt $retryCount"
            dotnet ef database update --project AgentAchieve/AgentAchieve.Infrastructure --startup-project AgentAchieve/AgentAchieve.WebUi.Server --connection "$(AzureSQLConnectionString)" 
            Write-Host "Migrations applied successfully."
            break
        } catch {
            Write-Error "Migration failed: $_" 
            if ($retryCount -ge $maxRetries) {
                throw
            } else {
                Start-Sleep -Seconds $sleepIntervalSeconds
                $retryCount++
            }
        }
    } while ($true)
  displayName: 'Apply EF Core migrations'

- task: DotNetCoreCLI@2
  displayName: 'Run Unit Tests'
  inputs:
    command: 'test'
    projects: |
      **/AgentAchieve.Core.UnitTests.csproj
      **/AgentAchieve.WebUi.Server.UnitTests.csproj
      **/AgentAchieve.Infrastructure.UnitTests.csproj
    arguments: '--configuration $(buildConfiguration) --collect "XPlat Code Coverage" --settings $(Build.SourcesDirectory)/AgentAchieve/codecoverage.runsettings'
    publishTestResults: true
  

- script: |
    dotnet tool install --global dotnet-reportgenerator-globaltool
    reportgenerator "-reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml" "-targetdir:$(Build.ArtifactStagingDirectory)/merged_coverage" "-reporttypes:HtmlInline_AzurePipelines;Cobertura"
  displayName: 'Create code coverage report'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.ArtifactStagingDirectory)/merged_coverage/Cobertura.xml'
    reportDirectory: '$(Build.ArtifactStagingDirectory)/merged_coverage'

- task: DotNetCoreCLI@2
  displayName: 'Publish'
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)'
    zipAfterPublish: true

- task: AzureWebApp@1
  inputs:
    azureSubscription: 'agent-achieve-managed-identity'
    appType: 'webApp'
    appName: 'AgentAchieveDev'
    package: '$(Build.ArtifactStagingDirectory)/**/*.zip'
    deploymentMethod: 'auto'